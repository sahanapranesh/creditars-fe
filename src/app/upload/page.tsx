/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/YRkahO7NO86
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client'
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { CardTitle, CardDescription, CardHeader, CardContent, Card } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Table, User } from "lucide-react"
import { Document, Page } from 'react-pdf';
import { Company, FileUploadResponse } from "@/utils/types"
import { ChangeEvent, Dispatch, FormEvent, SetStateAction, useState } from "react";
import 'react-pdf/dist/esm/Page/AnnotationLayer.css';
import { pdfjs } from 'react-pdf';
import 'react-pdf/dist/Page/TextLayer.css';

pdfjs.GlobalWorkerOptions.workerSrc = "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.3.136/pdf.worker.mjs";

interface PDFDisplayProps {
  uploadedFilePath: string;
  companyName: string;
  numPages: number;
  pageNumber: number;
  setPageNumber: Dispatch<SetStateAction<number>>;
  setNumPages: Dispatch<SetStateAction<number>>;
}

interface PDFFormProps {
  handleFileChange: (event: ChangeEvent<HTMLInputElement>) => void;
  handleSubmit: (event: FormEvent) => void;
  setCompanyName: Dispatch<SetStateAction<string>>;
  companyName: string;
}

interface ExtractedDataProps {
  company: Company;
}

const ExtractedDataComponent: React.FC<ExtractedDataProps> = ({ company }) => {
  return (
    <div className="grid gap-4">
      <div className="grid grid-cols-1 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Extracted Data</CardTitle>
            <CardDescription>View the key financial data extracted from the uploaded PDF.</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 gap-6">
              <div className="space-y-4">
                <div>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Metric</TableHead>
                        <TableHead>Current Year</TableHead>
                        <TableHead>Previous Year</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {company.statements.map((row) => (
                        <TableRow key={row.financialYear}>
                          <TableCell key={`assetlabel-${row.financialYear}`}>Total current assets</TableCell>
                          <TableCell key={`assets-${row.financialYear}`}>{row.totalCurrentAssets}</TableCell>
                        </TableRow>))}
                      {/* <TableRow>
                            <TableCell>Total current liabilities</TableCell>
                            <TableCell>{statement.totalCurrentLiabilities}</TableCell>
                            <TableCell>{statement.totalCurrentLiabilities}</TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>Gross Profit</TableCell>
                            <TableCell>{statement.grossProfit}</TableCell>
                            <TableCell>{statement.grossProfit}</TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>Income before taxes</TableCell>
                            <TableCell>{statement.incomeBeforeTaxes}</TableCell>
                            <TableCell>{statement.incomeBeforeTaxes}</TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>Total Expenses</TableCell>
                            <TableCell>{statement.totalExpenses}</TableCell>
                            <TableCell>{statement.totalExpenses}</TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>Total Sales</TableCell>
                            <TableCell>{statement.totalSales}</TableCell>
                            <TableCell>{statement.totalSales}</TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>HST Receivable</TableCell>
                            <TableCell>{statement.hstReceivable}</TableCell>
                            <TableCell>{statement.hstReceivable}</TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>Interest Receivable</TableCell>
                            <TableCell>{statement.interestReceivable}</TableCell>
                            <TableCell>{statement.interestReceivable}</TableCell>
                          </TableRow> */}
                    </TableBody>
                  </Table>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

const PDFDisplayComponent: React.FC<PDFDisplayProps> = ({ uploadedFilePath, pageNumber, numPages, setPageNumber, setNumPages }) => {
  const onDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {
    setNumPages(numPages);
    setPageNumber(1);
  };

  return (<div className="grid grid-cols-1 gap-2">
    <Card>
      <CardHeader>
        <CardTitle>PDF Viewer</CardTitle>
        <CardDescription>View the uploaded PDF financial statements.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="h-[400px] bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center" style={{ height: '100%', width: '100%' }}>
          <span className="text-gray-500 dark:text-gray-400">
            <Document
              file={`${uploadedFilePath}`}
              onLoadSuccess={onDocumentLoadSuccess}
            >
              <Page pageNumber={pageNumber} />
              <div>
                <button disabled={pageNumber <= 1} onClick={() => setPageNumber(pageNumber - 1)}>
                  Previous
                </button>
                <span>
                  Page {pageNumber} of {numPages}
                </span>
                <button
                  disabled={numPages === null || pageNumber >= numPages}
                  onClick={() => setPageNumber(pageNumber + 1)}
                >
                  Next
                </button>
              </div>
            </Document>
          </span>
        </div>
      </CardContent>
    </Card>
  </div>
  )
}

const PDFFormComponent: React.FC<PDFFormProps> = ({ handleFileChange, handleSubmit, setCompanyName, companyName }) => {
  return (<Card className="max-w-md">
    <CardHeader>
      <CardTitle>Upload Financial Statements</CardTitle>
      <CardDescription>
        Upload your company's balance sheet and income statement in PDF format, then view the extracted data.
      </CardDescription>
    </CardHeader>
    <CardContent>
      <form className="grid gap-4" onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 gap-4">
          <div className="space-y-2">
            <Label htmlFor="company-name">Company Name</Label>
            <Input id="company-name" placeholder="Enter company name" value={companyName} onChange={(e) => setCompanyName(e.target.value)} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="financial-statement">Upload Financial Statement</Label>
            <Input accept=".pdf" id="financial-statement" type="file" onChange={handleFileChange} />
          </div>
        </div>
        <Button className="justify-center" type="submit">
          Upload
        </Button>
      </form>
    </CardContent>
  </Card>)
}


export default function pdfviewer() {
  const [file, setFile] = useState<File | null>(null);
  const [companyName, setCompanyName] = useState<string | null>(null);
  const [uploadedFilePath, setUploadedFilePath] = useState<string | null>(null);
  const [numPages, setNumPages] = useState<number | null>(null);
  const [pageNumber, setPageNumber] = useState<number>(1);
  const [extractedDataResponse, setExtractedResponse] = useState<Company | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setFile(event.target.files[0]);
    }
  };

  const handleSubmit = async (event: FormEvent) => {
    event.preventDefault();
    if (!file) return;

    const formData = new FormData()
    formData.append('file', file);

    try {
      console.log("Company name" + companyName);
      await uploadDocument();
      await delay(5000);

    } catch (err) {
      console.log(err)
      setExtractedResponse(null);
    }

    function delay(ms: number) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function uploadDocument() {
      const res = await fetch('http://localhost:8080/upload?companyName=' + companyName, {
        method: 'POST',
        body: formData,
      })

      if (!res.ok) {
        throw new Error(`Upload failed with status: ${res.status}`)
      }

      const data: Company = await res.json()
      console.log('Uploaded file path after upload', data.fileUploadLocation)
      setUploadedFilePath(data.fileUploadLocation)
      setExtractedResponse(data)
      setError(null)
    }
  };
  return (

    <div className="grid min-h-screen w-full">
      <div className="flex h-[60px] items-center border-b bg-gray-100/40 px-6 dark:bg-gray-800/40">
        <Link className="flex items-center gap-2 font-semibold" href="#">
          <LandmarkIcon className="h-6 w-6" />
          <span className="">Financial Statement Analyzer</span>
        </Link>
        <Button className="ml-auto h-8 w-8" size="icon" variant="outline">
          <BellIcon className="h-4 w-4" />
          <span className="sr-only">Toggle notifications</span>
        </Button>
      </div>
      <div className="flex flex-1 flex-col">
        <div className="bg-gray-100/40 px-6 py-4 dark:bg-gray-800/40" style={{ height: '100%', width: '100%' }}>
          <PDFFormComponent handleSubmit={handleSubmit} handleFileChange={handleFileChange} setCompanyName={setCompanyName} />
        </div>
        <div className="grid grid-cols-2 gap-4 w-fit">
          {uploadedFilePath && <PDFDisplayComponent numPages={numPages} pageNumber={pageNumber}
            uploadedFilePath={uploadedFilePath}
            setPageNumber={setPageNumber} setNumPages={setNumPages} />}
          {extractedDataResponse && <ExtractedDataComponent company={extractedDataResponse} />}
        </div>
      </div>
    </div>
  )
}

function BellIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9" />
      <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0" />
    </svg>
  )
}


function LandmarkIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="3" x2="21" y1="22" y2="22" />
      <line x1="6" x2="6" y1="18" y2="11" />
      <line x1="10" x2="10" y1="18" y2="11" />
      <line x1="14" x2="14" y1="18" y2="11" />
      <line x1="18" x2="18" y1="18" y2="11" />
      <polygon points="12 2 20 7 4 7" />
    </svg>
  )
}
